version: '3.0'

services:
  api_order:
    image: node:alpine
    container_name: api-nodejs
    command: "npm run watch"
    working_dir: /usr/src/app
    env_file:
      - .env
    ports:
      - "3333:3000"
    volumes:
      - ./services/api_order:/usr/src/app
    networks:
      - api_network
    depends_on:
      - db_order
    links:
      - db_order

  db_order:
    image: mariadb:latest
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - ./dbs/db_order/data:/var/lib/mysql #synchronise le répertoire local ./db/data avec le répertoire du container /var/lib/mysql
      - ./dbs/db_order/sql:/docker-entrypoint-initdb.d #initialise la base de données à l'aide des fichiers SQL présents dans le volume local ./db/sql
    networks:
      - api_network
  api_auth:
    image: node:alpine
    container_name: api-nodejs-auth
    command: "npm run watch"
    working_dir: /usr/src/app
    env_file:
      - .env
    ports:
      - "3030:3000"
    volumes:
      - ./services/api_auth:/usr/src/app
    networks:
      - api_auth_network
    depends_on:
      - db_auth
    links:
      - db_auth
  db_auth:
      image: mariadb:latest
      env_file:
        - .env
      ports:
        - "3307:3306"
      volumes:
        - ./dbs/db_auth/data:/var/lib/mysql #synchronise le répertoire local ./db/data avec le répertoire du container /var/lib/mysql
        - ./dbs/db_auth/sql:/docker-entrypoint-initdb.d #initialise la base de données à l'aide des fichiers SQL présents dans le volume local ./db/sql
      networks:
        - api_auth_network
  gateway:
      image: node:alpine
      container_name: gateway-nodejs
      command: "npm run watch"
      working_dir: /usr/src/app
      ports:
        - "3000:3000"
      volumes:
        - ./gateway:/usr/src/app
      networks:
        - api_network
        - api_auth_network
      links:
        - api_order
        - api_auth

  database:
      container_name: database
      image: postgis/postgis:13-master
      ports:
        - 5432:5432
      # Required when running on platform other than amd64, like Apple M1/M2:
      # platform: linux/amd64
      volumes:
        - ./csvDBtoImport/data:/docker-entrypoint-initdb.d/data
        - ./csvDBtoImport/sql/1schema.sql:/docker-entrypoint-initdb.d/1schema.sql
      networks:
        - default
      environment:
        POSTGRES_USER: 'directus'
        POSTGRES_PASSWORD: 'directus'
        POSTGRES_DB: 'directus'

  directus:
      container_name: directus
      image: directus/directus:latest
      ports:
        - 8055:8055
      volumes:
        # By default, uploads are stored in /directus/uploads
        # Always make sure your volumes matches the storage root when using
        # local driver
        - ./uploads:/directus/uploads
        # Make sure to also mount the volume when using SQLite
        # - ./database:/directus/database
        # If you want to load extensions from the host
        # - ./extensions:/directus/extensions
      networks:
        - default
      depends_on:
        - database
      environment:
        KEY: '255d861b-5ea1-5996-9aa3-922530ec40b1'
        SECRET: '6116487b-cda1-52c2-b5b5-c8022c45e263'

        DB_CLIENT: 'pg'
        DB_HOST: 'database'
        DB_PORT: '5432'
        DB_DATABASE: 'directus'
        DB_USER: 'directus'
        DB_PASSWORD: 'directus'


        ADMIN_EMAIL: 'admin@example.com'
        ADMIN_PASSWORD: 'd1r3ctu5'

        # Make sure to set this in production
        # (see https://docs.directus.io/self-hosted/config-options#general)
        # PUBLIC_URL: 'https://directus.example.com'
networks:
  api_network:
    driver: bridge
  api_auth_network:
    driver: bridge
