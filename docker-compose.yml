version: '3.0'

services:
  api_order:
    image: node:alpine
    container_name: api-nodejs
    command: "npm run watch"
    working_dir: /usr/src/app
    env_file:
      - .env
    ports:
      - "3333:3000"
    volumes:
      - ./services/api_order:/usr/src/app
    networks:
      - api_network
    depends_on:
      - db_order
    links:
      - db_order

  db_order:
    image: mariadb:latest
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - ./dbs/db_order/data:/var/lib/mysql #synchronise le répertoire local ./db/data avec le répertoire du container /var/lib/mysql
      - ./dbs/db_order/sql:/docker-entrypoint-initdb.d #initialise la base de données à l'aide des fichiers SQL présents dans le volume local ./db/sql
    networks:
      - api_network
  api_auth:
    image: node:alpine
    container_name: api-nodejs-auth
    command: "npm run watch"
    working_dir: /usr/src/app
    env_file:
      - .env
    ports:
      - "3030:3000"
    volumes:
      - ./services/api_auth:/usr/src/app
    networks:
      - api_auth_network
    depends_on:
      - db_auth
    links:
      - db_auth
  db_auth:
      image: mariadb:latest
      env_file:
        - .env
      ports:
        - "3307:3306"
      volumes:
        - ./dbs/db_auth/data:/var/lib/mysql #synchronise le répertoire local ./db/data avec le répertoire du container /var/lib/mysql
        - ./dbs/db_auth/sql:/docker-entrypoint-initdb.d #initialise la base de données à l'aide des fichiers SQL présents dans le volume local ./db/sql
      networks:
        - api_auth_network
  gateway:
      image: node:alpine
      container_name: gateway-nodejs
      command: "npm run watch"
      working_dir: /usr/src/app
      ports:
        - "3000:3000"
      volumes:
        - ./gateway:/usr/src/app
      networks:
        - api_network
        - api_auth_network
      links:
        - api_order
        - api_auth
networks:
  api_network:
    driver: bridge
  api_auth_network:
    driver: bridge

